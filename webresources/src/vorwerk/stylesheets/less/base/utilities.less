//
// LESS Utility functions
//
/**
 * utilities.less
 * helper functions e.g. .border-radius creates the border raidus syntax for all browser
 * 
 */
 

@imgRoot: "../../img/";
@iconRoot: "@{imgRoot}icons/";


// transformation
.transform-scale(@scaleFactor) {
    -moz-transform:scale(@scaleFactor);
    -webkit-transform:scale(@scaleFactor);
    -ms-transform:scale(@scaleFactor);
    -o-transform:scale(@scaleFactor);
    transform:scale(@scaleFactor);
}
.transform-origin(@xAxis:50%, @yAxis:50%, @zAxis:0) {
    -moz-transform-origin: 0 0 0;
    -webkit-transform-origin: 0 0 0;
    -ms-transform-origin: 0 0 0;
    -o-transform-origin: 0 0 0;
    transform-origin: 0 0 0;
}
.box-shadow-none() {
    -moz-box-shadow: none;
    -o-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
}
.box-shadow(@Hshadow:0, @Vshadow:0, @blur:0, @spread:0, @color:#FFF) {
    -webkit-box-shadow: @arguments;
    -moz-box-shadow: @arguments;
    -o-box-shadow: @arguments;
    box-shadow: @arguments;
}
.box-shadow-inner(@Hshadow:0, @Vshadow:0, @blur:0, @spread:0, @color:#FFF, @inset:inset) {
    -webkit-box-shadow: @arguments;
    -moz-box-shadow: @arguments;
    -o-box-shadow: @arguments;
    box-shadow: @arguments;
}
// animation
.animation(@name, @duration, @timingFunction, @delay, @iterationCount, @direction) {
    .animation-name(@name);
    .animation-duration(@duration);
    .animation-timing-function(@timingFunction);
    .animation-delay(@delay);
    .animation-iteration-count(@iterationCount);
    .animation-direction(@direction);
}
.animation(@name, @duration, @timingFunction, @delay, @iterationCount) {
    .animation-name(@name);
    .animation-duration(@duration);
    .animation-timing-function(@timingFunction);
    .animation-delay(@delay);
    .animation-iteration-count(@iterationCount);
}
.animation-noTime(@name, @duration, @iterationCount, @direction) {
    .animation-name(@name);
    .animation-duration(@duration);
    .animation-iteration-count(@iterationCount);
    .animation-direction(@direction);
}
.animation-name(@keyframename) {
    -moz-animation-name:@keyframename;
    -webkit-animation-name:@keyframename;
    -ms-animation-name:@keyframename;
    -o-animation-name:@keyframename;
    animation-name:@keyframename;
}
.animation-duration(@time:0) {
    -moz-animation-duration:@time;
    -webkit-animation-duration:@time;
    -ms-animation-duration:@time;
    -o-animation-duration:@time;
    animation-duration:@time;
}
.animation-timing-function(@value:ease) {
    -moz-animation-timing-function:@value;
    -webkit-animation-timing-function:@value;
    -ms-animation-timing-function:@value;
    -o-animation-timing-function:@value;
    animation-timing-function:@value;
}
.animation-delay(@time:0) {
    -moz-animation-delay:@time;
    -webkit-animation-delay:@time;
    -ms-animation-delay:@time;
    -o-animation-delay:@time;
    animation-delay:@time;
}
.animation-iteration-count(@value:1) {
    -moz-animation-iteration-count:@value;
    -webkit-animation-iteration-count:@value;
    -ms-animation-iteration-count:@value;
    -o-animation-iteration-count:@value;
    animation-iteration-count:@value;
}
.animation-direction(@value:normal) {
    -moz-animation-direction:@value;
    -webkit-animation-direction:@value;
    -ms-animation-direction:@value;
    -o-animation-direction:@value;
    animation-direction:@value;
}
.animation-play-state(@value:running) {
    -moz-animation-play-state:@value;
    -webkit-animation-play-state:@value;
    -ms-animation-play-state:@value;
    -o-animation-play-state:@value;
    animation-play-state:@value;
}

.gradient-definition(@gradientName: "defaultGradient", @startColor: #ff0000 , @endColor:#00ff00) {  
  (~".@{gradientName}"){
    .vertical-gradient(@startColor, @endColor);
  }
}
.vertical-gradient(@startColor, @endColor){
    .vertical-gradient-offset(@startColor, 0%, @endColor, 100%);
}
.vertical-gradient-offset(@startColor, @startOffset, @endColor, @endOffset) {
    background: @startColor;
    background: -moz-linear-gradient(top,  @startColor @startOffset, @endColor @endOffset);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(@startOffset,@startColor), color-stop(@endOffset,@endColor));
    background: -webkit-linear-gradient(top,  @startColor @startOffset,@endColor @endOffset);
    background: -o-linear-gradient(top,  @startColor @startOffset,@endColor @endOffset);
    background: -ms-linear-gradient(top,  @startColor @startOffset,@endColor @endOffset);
    background: linear-gradient(to bottom,  @startColor @startOffset,@endColor @endOffset);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=(~"'@{startColor}'"), endColorstr=(~"'@{endColor}'"),GradientType=0 );
}
.vertical-gradient-3(@startColor, @midColor, @endColor) {
    .vertical-gradient-3-offset(@startColor, 0%, @midColor, 50%, @endColor, 100%);
}
.vertical-gradient-3-offset(@startColor: #ff0000, @startOffset: 0%, @midColor:#00ff00, @midOffset: 50%, @endColor:#0000ff, @endOffset:100%) {
    background: @startColor;
    background: -moz-linear-gradient(top,  @startColor @startOffset, @midColor @midOffset, @endColor @endOffset);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(@startOffset,@startColor), color-stop(@midOffset,@midColor), color-stop(@endOffset,@endColor));
    background: -webkit-linear-gradient(top,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset);
    background: -o-linear-gradient(top,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset);
    background: -ms-linear-gradient(top,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset);
    background: linear-gradient(to bottom,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=(~"'@{startColor}'"), endColorstr=(~"'@{endColor}'"),GradientType=0 );
}

.horizontal-gradient(@startColor: #ff0000, @endColor:#00ff00){
    background: @startColor;
    background: -moz-linear-gradient(left,  @startColor 0%, @endColor 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,@startColor), color-stop(100%,@endColor));
    background: -webkit-linear-gradient(left,  @startColor 0%,@endColor 100%);
    background: -o-linear-gradient(left,  @startColor 0%,@endColor 100%);
    background: -ms-linear-gradient(left,  @startColor 0%,@endColor 100%);
    background: linear-gradient(to right,  @startColor 0%,@endColor 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=(~"'@{startColor}'"), endColorstr=(~"'@{endColor}'"),GradientType=1 );
}

.horizontal-gradient-3(@startColor, @midColor, @endColor) {
    .horizontal-gradient-3-offset(@startColor, 0%, @midColor, 50%, @endColor, 100%);
}
.horizontal-gradient-3-offset(@startColor: #ff0000, @startOffset: 0%, @midColor:#00ff00, @midOffset: 50%, @endColor:#0000ff, @endOffset:100%) {
    background: @startColor;
    background: -moz-linear-gradient(left,  @startColor @startOffset, @midColor @midOffset, @endColor @endOffset);
    background: -webkit-gradient(linear, left top, right top, color-stop(@startOffset,@startColor), color-stop(@midOffset,@midColor), color-stop(@endOffset,@endColor));
    background: -webkit-linear-gradient(top,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset);
    background: -o-linear-gradient(left,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset);
    background: -ms-linear-gradient(left,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset);
    background: linear-gradient(to right,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=(~"'@{startColor}'"), endColorstr=(~"'@{endColor}'"),GradientType=1 );
}

.both-gradient-3(@startColor, @midColor, @endColor,@startHorColor, @midHorColor, @endHorColor) {
    .both-gradient-3-offset(@startColor, 0%, @midColor, 50%, @endColor, 100%, @startHorColor, 0%, @midHorColor, 50%, @endHorColor, 100%);
}
.both-gradient-3-offset(@startColor: #ff0000, @startOffset: 0%, @midColor:#00ff00, @midOffset: 50%, @endColor:#0000ff, @endOffset:100%,
                        @startHorColor: #ff0000, @startHorOffset: 0%, @midHorColor:#00ff00, @midHorOffset: 50%, @endHorColor:#0000ff, @endHorOffset:100%) {
    background: @startColor;
    background: -moz-linear-gradient(left,  @startColor @startOffset, @midColor @midOffset, @endColor @endOffset), -moz-linear-gradient(top,  @startHorColor @startHorOffset, @midHorColor @midHorOffset, @endHorColor @endHorOffset);
    background: -webkit-gradient(linear, left top, right top, color-stop(@startOffset,@startColor), color-stop(@midOffset,@midColor), color-stop(@endOffset,@endColor)), -webkit-gradient(linear, left top, left bottom, color-stop(@startHorOffset,@startHorColor), color-stop(@midHorOffset,@midHorColor), color-stop(@endHorOffset,@endHorColor));
    background: -webkit-linear-gradient(top,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset), -webkit-linear-gradient(top,  @startHorColor @startHorOffset,@midHorColor @midHorOffset,@endHorColor @endHorOffset);
    background: -o-linear-gradient(left,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset), -o-linear-gradient(top,  @startHorColor @startHorOffset,@midHorColor @midHorOffset,@endHorColor @endHorOffset);
    background: -ms-linear-gradient(left,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset), -ms-linear-gradient(top,  @startHorColor @startHorOffset,@midHorColor @midHorOffset,@endHorColor @endHorOffset);
    background: linear-gradient(to right,  @startColor @startOffset,@midColor @midOffset,@endColor @endOffset), linear-gradient(to bottom,  @startHorColor @startHorOffset,@midHorColor @midHorOffset,@endHorColor @endHorOffset);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=(~"'@{startColor}'"), endColorstr=(~"'@{endColor}'"),GradientType=1 );
}

// Border radius
.border-radius(@size: 5px){
    -webkit-border-radius: @size;
    -moz-border-radius: @size;
    border-radius: @size;
}

.border-radius-top(@size: 5px){
    -webkit-border-top-left-radius: @size;
    -webkit-border-top-right-radius: @size;
    -moz-border-radius-topleft: @size;
    -moz-border-radius-topright: @size;
    border-top-left-radius: @size;
    border-top-right-radius: @size;
}

.border-radius-bottom(@size: 5px){
    -webkit-border-bottom-right-radius: @size;
    -webkit-border-bottom-left-radius: @size;
    -moz-border-radius-bottomright: @size;
    -moz-border-radius-bottomleft: @size;
    border-bottom-right-radius: @size;
    border-bottom-left-radius: @size;
}

.border-radius-left(@size: 5px){
    -webkit-border-top-left-radius: @size;
    -webkit-border-bottom-left-radius: @size;
    -moz-border-radius-topleft: @size;
    -moz-border-radius-bottomleft: @size;
    border-top-left-radius: @size;
    border-bottom-left-radius: @size;
}

.border-radius-right(@size: 5px){
    -webkit-border-top-right-radius: @size;
    -webkit-border-bottom-right-radius: @size;
    -moz-border-radius-topright: @size;
    -moz-border-radius-topright: @size;
    border-bottom-right-radius: @size;
    border-top-right-radius: @size;
}


// Highres icon definition
.ui-icon-definition(@iconFile: "dummyIcon", @width: 18 , @height: 18, @fileExtension: "png") {
    (~".ui-icon-@{iconFile}"){
        background-image: url("@{iconRoot}@{iconFile}_@{width}x@{height}.@{fileExtension}");
        background-size: (~"@{width}px @{height}px");
    }

    @media only screen and (-webkit-min-device-pixel-ratio: 1.5),
                        only screen and (min-resolution: 144dpi) {
        @dblwidth : @width * 2;
        @dblheight : @height * 2;
        
        (~".ui-icon-@{iconFile}"){
            background-image: url("@{iconRoot}@{iconFile}_@{dblwidth}x@{dblheight}.@{fileExtension}");
        }
    }
}

/**
 *   Create an image definition with (optional) additional classes that are attached to the
 *   img-imgFile name. i.e. if the imgFile name is "myPicture" and the additional classes are ".bright" the resulting
 *   CSS will contain ".img-myPicture .bright {...}"
 */

.img-definitionExt(@imgFile: "dummyImg", @additionalClasses: "", @width: 18 , @height: 18, @fileExtension: "png") {
  (~".img-@{imgFile} @{additionalClasses}"){
        background-image: url("@{iconRoot}@{imgFile}_@{width}x@{height}.@{fileExtension}");
        width: (~"@{width}px");
        height: (~"@{height}px");
        background-repeat: no-repeat;
    }

    /*@media only screen and (-webkit-min-device-pixel-ratio: 1.5),
                        only screen and (min-resolution: 144dpi) {
    @dblwidth : @width * 2;
        @dblheight : @height * 2;
        
        (~".img-@{imgFile}"){
        background-image: url("@{iconRoot}@{imgFile}_@{dblwidth}x@{dblheight}.@{fileExtension}");
        background-size: cover;
    }
    }*/

}

/**
 *   Create a simple image with the given dimensions.
 */
.img-definition(@imgFile: "dummyImg", @width: 18 , @height: 18, @fileExtension: "png") {
  .img-definitionExt(@imgFile, "", @width, @height, @fileExtension);
}

/**
 *  Creates the sprite position offset styles for a specific image
 *  using the states name supplied.
 */

.sprite-position-offset(@spriteName, @state, @spriteOffset, @rowOffset){

        (~".@{spriteName}-@{state}"){
        background-position: (~"-@{spriteOffset}px -@{rowOffset}px");
       }
}

/**
 *   Create a sprite for a certain row with the defined states.
 *   By default the names for the states are "up", "down", "disabled".
 *   The name of the states can be set. Currently only three states are available.
 *   @spriteName: The name for this sprite 
 *   @width: width of one sprite
 *   @height: height of one sprite
 *   @stateAmount: The amount of states within this image
 *   @state1: The name of the first state (default: up)
 *   @state2: The name of the second state (default: down)
 *   @state3: The name of the thrid state (default:disabled)
 */
.sprite-definition(@spriteName: "dummySprite",@row: 0, @width: 18, @height:18, @stateAmount: 1, @state1: "up", @state2: "down", @state3: "disabled"){
  @dblwidth : @width * 2;
  @rowOffset : @row * @height;
  @dblRowOffset: @rowOffset * 2;
    
  .single-sprite (@index) {
     
     .statePositionOffset(@stateIndex){
     }
     
     .statePositionOffset(@stateIndex) when (@stateIndex = 3){
       .sprite-position-offset(@spriteName, @state1,  @spriteOffset, @rowOffset);
      }
     
     .statePositionOffset(@stateIndex) when (@stateIndex = 2){
        .sprite-position-offset(@spriteName, @state2, @spriteOffset, @rowOffset);
     }
     .statePositionOffset(@stateIndex) when (@stateIndex = 1){
       .sprite-position-offset(@spriteName, @state3, @spriteOffset, @rowOffset);
     }
     
     @spriteOffset: (@stateAmount - @index) * @width;
    .statePositionOffset(@index);
  }

  // helper class, will never show up in resulting css
  // will be called as long the index is above 0
  .loopingClass(@index) when (@index > 0) {

  // Call the given function within a loop.
  .single-sprite(@index);
  
  // next iteration
  .loopingClass(@index - 1);
  }
  
  // end the loop when index is 0
  .loopingClass (0) {}

  // "call" the loopingClass the first time with highest value
  .loopingClass (@stateAmount);
}

.img-fullscreen-definition(@imgFile: "dummyImg", @fileExtension:"png"){
	
	(~".img-fullscreen-@{imgFile}"){
        background-image: url("@{imgRoot}@{imgFile}_1024x768.@{fileExtension}");
        background-repeat: no-repeat;
        background-size: cover;
    	position:absolute; 
		top:0; 
		left:0; 
		right:0;
		bottom:0;
    }
    
    @media only screen and (orientation: portrait) and (max-device-width:2047px) {
		(~".img-fullscreen-@{imgFile}"){
        	background-image: url("@{imgRoot}@{imgFile}_768x1024.@{fileExtension}");
    	}
    }

    @media only screen and (device-aspect-ratio: ~'16/9') {
		(~".img-fullscreen-@{imgFile}"){
        	background-image: url("@{imgRoot}@{imgFile}_1280x720.@{fileExtension}");
    	}
    }
    
    @media only screen and (device-aspect-ratio: ~'16/9') and (orientation: portrait) {
		(~".img-fullscreen-@{imgFile}"){
        	background-image: url("@{imgRoot}@{imgFile}_720x1280.@{fileExtension}");
    	}
    }
    
    /* iPhone 5*/
    @media only screen and (device-aspect-ratio: ~'40/71') {
		(~".img-fullscreen-@{imgFile}"){
        	background-image: url("@{imgRoot}@{imgFile}_1280x720.@{fileExtension}");
    	}
    }
    
    @media only screen and (device-aspect-ratio: ~'40/71') and (orientation: portrait) {
		(~".img-fullscreen-@{imgFile}"){
        	background-image: url("@{imgRoot}@{imgFile}_720x1280.@{fileExtension}");
    	}
    }
    
    @media only screen and (device-aspect-ratio: ~'16/10') {
		(~".img-fullscreen-@{imgFile}"){
        	background-image: url("@{imgRoot}@{imgFile}_1920x1200.@{fileExtension}");
    	}
    }
    
    @media only screen and (device-aspect-ratio: ~'16/10') and (orientation: portrait) {
		(~".img-fullscreen-@{imgFile}"){
        	background-image: url("@{imgRoot}@{imgFile}_1200x1920.@{fileExtension}");
    	}
    } 
    
    @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-min-device-pixel-ratio: 2)
	{
		(~".img-fullscreen-@{imgFile}"){
			background-image: url("@{imgRoot}@{imgFile}_2048x1536.@{fileExtension}");			
		}        
    }
    
    @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-min-device-pixel-ratio: 2) and (orientation: portrait)
	{
		(~".img-fullscreen-@{imgFile}"){
			background-image: url("@{imgRoot}@{imgFile}_1536x2048.@{fileExtension}");			
		}        
    }
}